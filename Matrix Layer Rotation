#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

/*
 * Complete the 'matrixRotation' function below.
 *
 * The function accepts following parameters:
 *  1. 2D_INTEGER_ARRAY matrix
 *  2. INTEGER r
 */

int nodeOfCircle(int initial, int endX, int endY) {
    return 2 * (endX+endY-(2*(initial-1))) - 4;
}

void matrixRotation(vector<vector<int>> matrix, int r) {
    
    vector<vector<int>> resultMatrix;
    
    int rowSize = matrix.size()-1;
    int colSize = matrix[0].size()-1;
    
    for(int ini=0, rSize=rowSize, cSize=colSize; ini<=rSize && ini<=cSize; ini++, rSize--, cSize--)
    {
        int travelNode = r % nodeOfCircle(ini,rSize,cSize);
        vector<int> row;
        vector<int> col;
        vector<int> val;
        vector<int> newVal;
        
        //for(int i = ini; i<=rSize; i++)
        //{ cout<<matrix[ini][i]<<" "<<endl;}
        //for(int i = ini+1; i<cSize; i++)
        //{ cout<<matrix[i][cSize]<<" "<<endl;}
        //for(int i = rSize; i>=ini; i--)
        //{ cout<<matrix[rSize][i]<<" "<<endl;}
        //for(int i = cSize-1; i>ini; i--)
        //{ cout<<matrix[i][ini]<<" "<<endl;}
        
        for(int i = ini; i<=cSize; i++)
        { 
            row.push_back(ini);
            col.push_back(i);
            val.push_back(matrix[ini][i]);
        }
        for(int i = ini+1; i<rSize; i++)
        { 
            row.push_back(i);
            col.push_back(cSize);
            val.push_back(matrix[i][cSize]);
        }
        for(int i = cSize; i>=ini; i--)
        { 
            row.push_back(rSize);
            col.push_back(i);
            val.push_back(matrix[rSize][i]);
        }
        for(int i = rSize-1; i>ini; i--)
        { 
            row.push_back(i);
            col.push_back(ini);
            val.push_back(matrix[i][ini]);
        }
        
        for(int i = travelNode; i < val.size(); i++) newVal.push_back(val[i]);
        for(int i = 0; i < travelNode; i++) newVal.push_back(val[i]);
        
        for(int i = 0; i < row.size(); i++) matrix[row[i]][col[i]] = newVal[i];
        
        //for(int i = 0; i < row.size(); i++) cout<<row[i]<<" ";
        //cout<<endl;
        //for(int i = 0; i < row.size(); i++) cout<<col[i]<<" ";
        //cout<<endl;
        //for(int i = 0; i < row.size(); i++) cout<<val[i]<<" ";
        //cout<<endl;
        //for(int i = 0; i < row.size(); i++) cout<<newVal[i]<<" ";
        //cout<<endl;
    }
    //cout<<endl;
    
    for(int i=0; i<=rowSize; i++)
    {
        for(int j=0; j<=colSize; j++)
        {
            if(j!=0) cout<<" ";
            cout<<matrix[i][j];
        }
        cout<<endl;
    }
    
}

int main()
{
    string first_multiple_input_temp;
    getline(cin, first_multiple_input_temp);

    vector<string> first_multiple_input = split(rtrim(first_multiple_input_temp));

    int m = stoi(first_multiple_input[0]);

    int n = stoi(first_multiple_input[1]);

    int r = stoi(first_multiple_input[2]);

    vector<vector<int>> matrix(m);

    for (int i = 0; i < m; i++) {
        matrix[i].resize(n);

        string matrix_row_temp_temp;
        getline(cin, matrix_row_temp_temp);

        vector<string> matrix_row_temp = split(rtrim(matrix_row_temp_temp));

        for (int j = 0; j < n; j++) {
            int matrix_row_item = stoi(matrix_row_temp[j]);

            matrix[i][j] = matrix_row_item;
        }
    }

    matrixRotation(matrix, r);

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
